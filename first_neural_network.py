# -*- coding: utf-8 -*-
"""First neural network

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1NYLOLnea63_CZGH0Zfbf2SEczKnuRzeb
"""

import tensorflow as tf
import numpy as np

celsius = np.array([-40, -10, 0, 8, 15, 22, 38], dtype=float)
farentheit = np.array([-40, 14, 32, 46, 59, 72, 100], dtype=float)

#esto se lo emple贸 para 2 neuronas nomas, una de entrada y otra de salida
#capa= tf.keras.layers.Dense(units=1,input_shape=[1])
#modelo = tf.keras.Sequential([capa])

oculta1= tf.keras.layers.Dense(units=3,input_shape=[1])
oculta2= tf.keras.layers.Dense(units=3)
salida= tf.keras.layers.Dense(units=1)
modelo = tf.keras.Sequential([oculta1,oculta2,salida])

modelo.compile(
    optimizer= tf.keras.optimizers.Adam(0.1),
    loss='mean_squared_error'
)

#con mas capas, tarda menos tiempo en entrenar
print("comenzando entrenamiento")
historial = modelo.fit(celsius, farentheit,epochs=1000, verbose=False)
print("modelo entrenado")

import matplotlib.pyplot as plt
plt.xlabel("# epoca")
plt.ylabel("Magnitud de perdida")
plt.plot(historial.history["loss"])

#si usamos mas capas, el aprendizaje se hace mucho mas rapido, vemos que apenas en aprox 50 iteraciones aprendi贸
#mientras que con una sola capa tard贸 aproximadamente 500 iteraciones

#con una capa arroja una prediccion de 211.74406 (siendo el resultado correcto 212)
#con mas capas di贸 un resultado mas exacto de 211.74744
print("hagamos una prediccion!")
resultado = modelo.predict([100.0])
print("el resultado es: "+ str(resultado)+ " farenheit!")

# con una capa da un sesgo de [array([[1.7981331]], dtype=float32), array([31.930761], dtype=float32)] (siendo el ideal 1.8 y 32)
#Con varias capas carece de sentido ver los pesos porque es un proceso interno de la IA
print("Variables internas del modelo")
print(oculta1.get_weights())
print(oculta2.get_weights())
print(salida.get_weights())